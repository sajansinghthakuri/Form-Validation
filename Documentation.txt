# üìò Project Documentation: **Form Validation**

## üßæ Overview

This project implements a **client-side form validation system** using **HTML5 validation attributes**, **CSS visual feedback**, and **JavaScript logic**.
The form collects user details such as **Full Name**, **Mobile Number**, **Email Address**, **Website URL**, and **Password**.

Validation ensures:

* All fields are correctly filled.
* Passwords meet strength requirements.
* Passwords match before submission.

---

## üß± File Structure

```
form-validation/
‚îÇ
‚îú‚îÄ‚îÄ index.html      # Main HTML structure
‚îú‚îÄ‚îÄ style.css       # Styling for the form and UI feedback
‚îî‚îÄ‚îÄ script.js       # Validation logic and form submission handling
```

---

## üß© 1. HTML: `index.html`

### Purpose:

Defines the structure and form fields for user input and integrates CSS and JavaScript for styling and behavior.

### Key Features:

* **HTML5 validation** using attributes such as `required`, `pattern`, `minlength`, and `maxlength`.
* **Semantic labels** and placeholders for accessibility.
* **Pattern matching** for mobile number and password.
* **Dynamic validation message area** for feedback.

### Code Breakdown:

```html
<form action="" id="form">
```

* Creates the form element with a unique `id` for JavaScript reference.

#### Input Fields:

| Field                | Type       | Validation                                         | Description                                   |
| -------------------- | ---------- | -------------------------------------------------- | --------------------------------------------- |
| **Full Name**        | `text`     | `required`, `minlength="3"`, `maxlength="100"`     | User‚Äôs full name                              |
| **Mobile Number**    | `tel`      | `pattern="[9]{1}[8]{1}[0-9]{8}"`, `maxlength="10"` | Must start with `98` and have 10 digits       |
| **Email Address**    | `email`    | `required`                                         | Must be a valid email format                  |
| **Website URL**      | `url`      | `required`                                         | Must be a valid URL                           |
| **Password**         | `password` | `pattern="^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$"`  | Must include uppercase, lowercase, and number |
| **Confirm Password** | `password` | Same as above                                      | Must match the first password                 |

#### Message Section:

```html
<div class="message-container">
    <h3 id="message">Message</h3>
</div>
```

Used to display dynamic success or error messages after validation.

---

## üé® 2. CSS: `style.css`

### Purpose:

Defines the layout, typography, and validation feedback styling.

### Key Features:

* **Center-aligned card layout**.
* **Responsive, clean design** similar to modern signup forms.
* **Color cues** for input validation (green = valid, red = invalid).

### Notable Styles:

| Selector                                | Purpose                                                   |
| --------------------------------------- | --------------------------------------------------------- |
| `.container`                            | Creates the card layout for the form                      |
| `input:valid:not(:placeholder-shown)`   | Turns input borders green when valid                      |
| `input:invalid:not(:placeholder-shown)` | Turns input borders red when invalid                      |
| `button:hover`                          | Brightens button color on hover                           |
| `.message-container`                    | Displays success or error messages with border color cues |

---

## ‚öôÔ∏è 3. JavaScript: `script.js`

### Purpose:

Handles **real-time validation**, **password matching**, and **form submission logic**.

### Main Variables:

```js
const form = document.getElementById('form');
const password1El = document.getElementById('password1');
const password2El = document.getElementById('password2');
const messageContainer = document.querySelector('.message-container');
const message = document.getElementById('message');
```

References key DOM elements for validation and user feedback.

---

### üîç Functions Breakdown

#### 1. `validateForm()`

Validates the entire form using the browser‚Äôs built-in validation and custom logic.

**Steps:**

1. Uses `form.checkValidity()` to check HTML5 validity.
2. Displays an error message if invalid fields exist.
3. Checks if both passwords match.
4. Updates UI (border colors and messages) accordingly.

**Example Behavior:**

* Displays `"Passwords do not match."` in red if passwords differ.
* Displays `"Successfully Registered!"` in green if everything is valid.

---

#### 2. `storeFormData()`

Collects and logs user data after successful validation.

**Creates a user object:**

```js
const user = {
  name: form.name.value,
  mobile: form.mobile.value,
  email: form.email.value,
  website: form.website.value,
  password: form.password.value
};
```

Currently logs the data to the console but can be expanded to store data in a database or localStorage.

---

#### 3. `processFormData(e)`

Handles the submit event.

**Steps:**

1. Prevents default form submission with `e.preventDefault()`.
2. Runs `validateForm()`.
3. Calls `storeFormData()` only if validation passes.

```js
form.addEventListener('submit', processFormData);
```

---

## ‚úÖ Validation Logic Summary

| Check                     | Logic                                     | Feedback                                    |
| ------------------------- | ----------------------------------------- | ------------------------------------------- |
| **Empty fields**          | HTML5 `required` + `checkValidity()`      | Red border + message                        |
| **Invalid pattern**       | HTML5 `pattern` attribute                 | Red border                                  |
| **Passwords mismatch**    | JS comparison (`password1 !== password2`) | Error message + red borders                 |
| **Successful submission** | All checks pass                           | ‚ÄúSuccessfully Registered!‚Äù message in green |

---

## üì¶ Future Enhancements

* Add **real-time feedback** (e.g., password strength meter).
* Integrate **localStorage** or **API submission**.
* Implement **responsive design** for smaller screens.
* Add **form reset** after successful registration.

---

## üë®‚Äçüíª Author Notes

* Built with **HTML5**, **CSS3**, and **Vanilla JavaScript**.
* Follows modern front-end validation practices.
* No external dependencies ‚Äî runs entirely in the browser.

---